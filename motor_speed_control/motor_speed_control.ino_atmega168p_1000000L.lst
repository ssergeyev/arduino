
C:\Users\S_SERG~1\AppData\Local\Temp\arduino_build_809520/motor_speed_control.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
__trampolines_start():
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  74:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  76:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  78:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  7e:	a9 30       	cpi	r26, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  80:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
.do_clear_bss_start():
  84:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  88:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

0000008c <__bad_interrupt>:
__vector_22():
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
setup():
C:\Users\s_sergeyev\Documents\Arduino\motor_speed_control/motor_speed_control.ino:4
void setup() {
  // put your setup code here, to run once:

}
  90:	08 95       	ret

00000092 <loop>:
loop():
  92:	08 95       	ret

00000094 <initVariant>:
initVariant():
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
  94:	08 95       	ret

00000096 <main>:
main():
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
  96:	0e 94 a4 00 	call	0x148	; 0x148 <init>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
  9a:	0e 94 4a 00 	call	0x94	; 0x94 <initVariant>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
  9e:	0e 94 48 00 	call	0x90	; 0x90 <setup>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
  a6:	0e 94 49 00 	call	0x92	; 0x92 <loop>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
  aa:	20 97       	sbiw	r28, 0x00	; 0
  ac:	e1 f3       	breq	.-8      	; 0xa6 <main+0x10>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
  ae:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x10>

000000b4 <__vector_16>:
__vector_16():
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:606
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	8f 93       	push	r24
  c4:	9f 93       	push	r25
  c6:	af 93       	push	r26
  c8:	bf 93       	push	r27
  ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
  ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
  d2:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
  d6:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
  da:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>
  de:	20 e3       	ldi	r18, 0x30	; 48
  e0:	23 0f       	add	r18, r19
  e2:	2d 37       	cpi	r18, 0x7D	; 125
  e4:	58 f5       	brcc	.+86     	; 0x13c <__vector_16+0x88>
  e6:	40 96       	adiw	r24, 0x10	; 16
  e8:	a1 1d       	adc	r26, r1
  ea:	b1 1d       	adc	r27, r1
  ec:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
  f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
  f4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
  f8:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
  fc:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
 100:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 104:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 108:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 10c:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	a1 1d       	adc	r26, r1
 114:	b1 1d       	adc	r27, r1
 116:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 11a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 11e:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 122:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
 126:	bf 91       	pop	r27
 128:	af 91       	pop	r26
 12a:	9f 91       	pop	r25
 12c:	8f 91       	pop	r24
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti
 13c:	23 eb       	ldi	r18, 0xB3	; 179
 13e:	23 0f       	add	r18, r19
 140:	41 96       	adiw	r24, 0x11	; 17
 142:	a1 1d       	adc	r26, r1
 144:	b1 1d       	adc	r27, r1
 146:	d2 cf       	rjmp	.-92     	; 0xec <__vector_16+0x38>

00000148 <init>:
init():
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:612

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 148:	78 94       	sei
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:624

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 14a:	84 b5       	in	r24, 0x24	; 36
 14c:	83 60       	ori	r24, 0x03	; 3
 14e:	84 bd       	out	0x24, r24	; 36
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:639
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 150:	85 b5       	in	r24, 0x25	; 37
 152:	83 60       	ori	r24, 0x03	; 3
 154:	85 bd       	out	0x25, r24	; 37
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:651

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 156:	ee e6       	ldi	r30, 0x6E	; 110
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	81 60       	ori	r24, 0x01	; 1
 15e:	80 83       	st	Z, r24
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:662
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:673
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 166:	e0 e8       	ldi	r30, 0x80	; 128
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:680

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 170:	e1 eb       	ldi	r30, 0xB1	; 177
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	84 60       	ori	r24, 0x04	; 4
 178:	80 83       	st	Z, r24
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:689

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 17a:	e0 eb       	ldi	r30, 0xB0	; 176
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 83       	st	Z, r24
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:725
  #elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 2000000 // 2 MHz / 16 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADEN);
  #elif F_CPU >= 1000000 // 1 MHz / 8 = 125 KHz
    ADCSRA = _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 184:	83 e8       	ldi	r24, 0x83	; 131
 186:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:737
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 18a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\s_sergeyev\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.0.9\cores\MCUdude_corefiles/wiring.c:739
#endif
}
 18e:	08 95       	ret

00000190 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 190:	f8 94       	cli

00000192 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
